{"mappings":"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","sources":["src/scripts/index.js"],"sourcesContent":["const squares = Array.from(document.getElementsByClassName('square'));\nconst message = document.getElementById('message');\nconst btnStatus = document.getElementById('btn-status');\nconst btnReset = document.getElementById('btn-reset');\nconst scoreX = document.getElementById('score-x');\nconst scoreO = document.getElementById('score-o');\nlet player1Active = true;\nlet clicks = 0;\nlet player1Score = 0;\nlet player2Score = 0;\nlet flatMatrix = ['', '', '', '', '', '', '', '', ''];\nlet winningSequences = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\nfunction startGame() {\n    player1Active = true;\n    clicks = 0;\n    flatMatrix = ['', '', '', '', '', '', '', '', ''];\n\n    message.textContent = '';\n    btnStatus.style.display = 'none';\n    btnStatus.removeEventListener('click', startGame);\n\n    squares.forEach(square => {\n        square.addEventListener('click', placeSymbol);\n        square.style.cursor = 'pointer';\n        square.innerHTML = '';\n        square.classList.remove('x', 'o');\n        square.style.backgroundColor = '#0f0326';\n    });\n\n    btnReset.addEventListener('click', resetScore);\n}\n\nstartGame();\n\nfunction placeSymbol(e) {\n    const squareIndex = squares.indexOf(e.target);\n\n    if (player1Active) {\n        squares[squareIndex].textContent = 'X';\n        squares[squareIndex].classList.add('x');\n        flatMatrix.splice(squareIndex, 1, 'x');\n    } else {\n        squares[squareIndex].textContent = 'O';\n        squares[squareIndex].classList.add('o');\n        flatMatrix.splice(squareIndex, 1, 'o');\n    }\n\n    clicks++;\n    clicks >= 3 && checkGameStatus();\n\n    e.target.removeEventListener('click', placeSymbol);\n    e.target.style.cursor = 'default';\n    player1Active = !player1Active;\n}\n\nfunction checkGameStatus() {\n    const matrixSize = Math.sqrt(flatMatrix.length);\n    let rows = [];\n    let columns;\n    let diagonals = [[], []];\n    let start = 0;\n    let end = matrixSize;\n    let winningSequence;\n    let winneableSequences = 0;\n\n    for (let i = 0; i < matrixSize; i++) {\n        rows.push(flatMatrix.slice(start, end));\n        diagonals[0].push(rows[i][i]);\n        diagonals[1].push(rows[i][matrixSize - 1 - i]);\n        start += matrixSize;\n        end += matrixSize;\n    }\n\n    columns = rows[0].map((_, i) => rows.map(v => v[i]));\n\n    let sequences = rows.concat(columns).concat(diagonals);\n\n    for (let i = 0; i < sequences.length; i++) {\n        winningSequence = sequences[i].reduce((acc, value) => {\n            if (acc === value) return acc;\n        });\n\n        if (winningSequence) {\n            winningSequences[i].forEach(num => {\n                squares[num].style.backgroundColor = '#e65f5c';\n            });\n            endGame('win');\n            break;\n        }\n\n        const emptySquares = sequences[i].filter(v => v === '').length;\n\n        if (emptySquares >= 2) winneableSequences++;\n        else if (emptySquares === 1) {\n            const newSequence = sequences[i].filter(v => v !== '');\n            newSequence[0] === newSequence[1] && winneableSequences++;\n        }\n    }\n\n    if (!winningSequence && winneableSequences === 0) {\n        endGame('gameover');\n    }\n}\n\nfunction endGame(status) {\n    squares.forEach(square => {\n        square.removeEventListener('click', placeSymbol);\n        square.style.cursor = 'default';\n    });\n\n    if (status === 'win') {\n        if (player1Active) {\n            message.textContent = 'Player 1 has won this round!';\n            player1Score++;\n            let word = player1Score === 1 ? 'win' : 'wins';\n            scoreX.textContent = `${player1Score} ${word}`;\n        } else {\n            message.textContent = 'Player 2 has won this round!';\n            player2Score++;\n            let word = player2Score === 1 ? 'win' : 'wins';\n            scoreO.textContent = `${player2Score} ${word}`;\n        }\n    }\n    if (status === 'gameover') {\n        message.textContent = 'The game is blocked.';\n    }\n\n    btnStatus.addEventListener('click', startGame);\n    btnStatus.style.display = 'inline-block';\n}\n\nfunction resetScore() {\n    player1Score = 0;\n    player2Score = 0;\n    scoreX.textContent = '0 wins';\n    scoreO.textContent = '0 wins';\n    btnReset.removeEventListener('click', resetScore);\n    startGame();\n}\n"],"names":["squares","Array","from","document","getElementsByClassName","message","getElementById","btnStatus","btnReset","scoreX","scoreO","player1Active","clicks","player1Score","player2Score","flatMatrix","winningSequences","startGame","textContent","style","display","removeEventListener","forEach","square","addEventListener","placeSymbol","cursor","innerHTML","classList","remove","backgroundColor","resetScore","e","squareIndex","indexOf","target","add","splice","checkGameStatus","matrixSize","Math","sqrt","length","columns","winningSequence","rows","diagonals","start","end","winneableSequences","i","push","slice","map","_","i1","v","sequences","concat","reduce","acc","value","num","endGame","emptySquares","filter","newSequence","status","word"],"version":3,"file":"index.1884cede.js.map"}